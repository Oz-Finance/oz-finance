/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OZV0Interface extends ethers.utils.Interface {
  functions: {
    "DAYS_IN_SECONDS()": FunctionFragment;
    "_currentTokenPrice(uint256)": FunctionFragment;
    "_dripwithdrawal(address,uint64)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "bonuspercentage()": FunctionFragment;
    "calculateDrip(address,uint64)": FunctionFragment;
    "changeBonusPercentage(uint256)": FunctionFragment;
    "completeKYC(address,address,bool)": FunctionFragment;
    "currentTokenPrice()": FunctionFragment;
    "dripWithdrawal(uint32)": FunctionFragment;
    "flashSale(address,address,uint128)": FunctionFragment;
    "idToAddress(uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "investment(address,uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "ozOperations()": FunctionFragment;
    "purchaseOZBonusTokens(uint128,address)": FunctionFragment;
    "purchaseTokens(uint128,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rootNode()": FunctionFragment;
    "sellToken(address[],uint256[],uint64)": FunctionFragment;
    "slotReservedByAdmin(address,uint256)": FunctionFragment;
    "tokenAddresses(uint256)": FunctionFragment;
    "tokenCounter()": FunctionFragment;
    "tokenIsRegistered(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDAYS_IN_SECONDS(uint256)": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAYS_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_currentTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_dripwithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bonuspercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDrip",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBonusPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeKYC",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dripWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashSale",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "investment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ozOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseOZBonusTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTokens",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rootNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotReservedByAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIsRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDAYS_IN_SECONDS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DAYS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_currentTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_dripwithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonuspercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDrip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBonusPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeKYC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dripWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ozOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseOZBonusTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slotReservedByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDAYS_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "BonusAllocation(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DripWithdrawal(address,uint32,uint256,uint256)": EventFragment;
    "FlashSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchaseTokens(address,uint256,uint32,uint256,bool,uint256,uint256,bool,uint256,uint256)": EventFragment;
    "ReffralIncome(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Registration(address,address,uint256,uint256,uint256,bool)": EventFragment;
    "SellToken(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SlotReservedByAdmin(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DripWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReffralIncome"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlotReservedByAdmin"): EventFragment;
}

export class OZV0 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OZV0Interface;

  functions: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DAYS_IN_SECONDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _currentTokenPrice(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "_currentTokenPrice(uint256)"(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    _dripwithdrawal(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dripToTransfer: BigNumber }>;

    "_dripwithdrawal(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dripToTransfer: BigNumber }>;

    addToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonuspercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bonuspercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateDrip(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateDrip(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeBonusPercentage(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeBonusPercentage(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeKYC(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeKYC(address,address,bool)"(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentTokenPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "currentTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    dripWithdrawal(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dripWithdrawal(uint32)"(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashSale(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flashSale(address,address,uint128)"(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "idToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investment(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        time: BigNumber;
        tokens: BigNumber;
        totalTokensWithdrawn: BigNumber;
      }
    >;

    "investment(address,uint64)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        time: BigNumber;
        tokens: BigNumber;
        totalTokensWithdrawn: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ozOperations(overrides?: CallOverrides): Promise<[string]>;

    "ozOperations()"(overrides?: CallOverrides): Promise<[string]>;

    purchaseOZBonusTokens(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "purchaseOZBonusTokens(uint128,address)"(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseTokens(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "purchaseTokens(uint128,address,address)"(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootNode(overrides?: CallOverrides): Promise<[string]>;

    "rootNode()"(overrides?: CallOverrides): Promise<[string]>;

    sellToken(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellToken(address[],uint256[],uint64)"(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slotReservedByAdmin(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "slotReservedByAdmin(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIsRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "tokenIsRegistered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDAYS_IN_SECONDS(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDAYS_IN_SECONDS(uint256)"(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        boolean,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenPrice: BigNumber;
        lastInvestmentTimestamp: number;
        referrer: string;
        investedDollars: BigNumber;
        KYC: boolean;
        mintedOnce: boolean;
        bonusMatrixAllocation: number;
        id: BigNumber;
        userType: number;
        investmentCounter: number;
        investedDollarsInBonusSlots: BigNumber;
        soldDollarsInFlashSale: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        boolean,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenPrice: BigNumber;
        lastInvestmentTimestamp: number;
        referrer: string;
        investedDollars: BigNumber;
        KYC: boolean;
        mintedOnce: boolean;
        bonusMatrixAllocation: number;
        id: BigNumber;
        userType: number;
        investmentCounter: number;
        investedDollarsInBonusSlots: BigNumber;
        soldDollarsInFlashSale: BigNumber;
        totalTokens: BigNumber;
      }
    >;
  };

  DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  "DAYS_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

  _currentTokenPrice(
    _publicSaleInDollars: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_currentTokenPrice(uint256)"(
    _publicSaleInDollars: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _dripwithdrawal(
    user: string,
    counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_dripwithdrawal(address,uint64)"(
    user: string,
    counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addToken(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addToken(address)"(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonuspercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "bonuspercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateDrip(
    user: string,
    counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateDrip(address,uint64)"(
    user: string,
    counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeBonusPercentage(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeBonusPercentage(uint256)"(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeKYC(
    _referrer: string,
    user: string,
    check: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeKYC(address,address,bool)"(
    _referrer: string,
    user: string,
    check: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  dripWithdrawal(
    counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dripWithdrawal(uint32)"(
    counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashSale(
    user: string,
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flashSale(address,address,uint128)"(
    user: string,
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  idToAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "idToAddress(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _root: string,
    ozTokenAddress: string,
    _ozOperations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _root: string,
    ozTokenAddress: string,
    _ozOperations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investment(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      time: BigNumber;
      tokens: BigNumber;
      totalTokensWithdrawn: BigNumber;
    }
  >;

  "investment(address,uint64)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      time: BigNumber;
      tokens: BigNumber;
      totalTokensWithdrawn: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ozOperations(overrides?: CallOverrides): Promise<string>;

  "ozOperations()"(overrides?: CallOverrides): Promise<string>;

  purchaseOZBonusTokens(
    value: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "purchaseOZBonusTokens(uint128,address)"(
    value: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseTokens(
    value: BigNumberish,
    tokenAddress: string,
    _referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "purchaseTokens(uint128,address,address)"(
    value: BigNumberish,
    tokenAddress: string,
    _referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootNode(overrides?: CallOverrides): Promise<string>;

  "rootNode()"(overrides?: CallOverrides): Promise<string>;

  sellToken(
    tokenAddresses: string[],
    numberOfTokens: BigNumberish[],
    investmentCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellToken(address[],uint256[],uint64)"(
    tokenAddresses: string[],
    numberOfTokens: BigNumberish[],
    investmentCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slotReservedByAdmin(
    user: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "slotReservedByAdmin(address,uint256)"(
    user: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenAddresses(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIsRegistered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenIsRegistered(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDAYS_IN_SECONDS(
    sec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDAYS_IN_SECONDS(uint256)"(
    sec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      string,
      BigNumber,
      boolean,
      boolean,
      number,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenPrice: BigNumber;
      lastInvestmentTimestamp: number;
      referrer: string;
      investedDollars: BigNumber;
      KYC: boolean;
      mintedOnce: boolean;
      bonusMatrixAllocation: number;
      id: BigNumber;
      userType: number;
      investmentCounter: number;
      investedDollarsInBonusSlots: BigNumber;
      soldDollarsInFlashSale: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  "users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      string,
      BigNumber,
      boolean,
      boolean,
      number,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenPrice: BigNumber;
      lastInvestmentTimestamp: number;
      referrer: string;
      investedDollars: BigNumber;
      KYC: boolean;
      mintedOnce: boolean;
      bonusMatrixAllocation: number;
      id: BigNumber;
      userType: number;
      investmentCounter: number;
      investedDollarsInBonusSlots: BigNumber;
      soldDollarsInFlashSale: BigNumber;
      totalTokens: BigNumber;
    }
  >;

  callStatic: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "DAYS_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    _currentTokenPrice(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_currentTokenPrice(uint256)"(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _dripwithdrawal(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_dripwithdrawal(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bonuspercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "bonuspercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDrip(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDrip(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeBonusPercentage(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeBonusPercentage(uint256)"(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeKYC(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "completeKYC(address,address,bool)"(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    dripWithdrawal(
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dripWithdrawal(uint32)"(
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashSale(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashSale(address,address,uint128)"(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    idToAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "idToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investment(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        time: BigNumber;
        tokens: BigNumber;
        totalTokensWithdrawn: BigNumber;
      }
    >;

    "investment(address,uint64)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        time: BigNumber;
        tokens: BigNumber;
        totalTokensWithdrawn: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ozOperations(overrides?: CallOverrides): Promise<string>;

    "ozOperations()"(overrides?: CallOverrides): Promise<string>;

    purchaseOZBonusTokens(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseOZBonusTokens(uint128,address)"(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseTokens(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseTokens(uint128,address,address)"(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rootNode(overrides?: CallOverrides): Promise<string>;

    "rootNode()"(overrides?: CallOverrides): Promise<string>;

    sellToken(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sellToken(address[],uint256[],uint64)"(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slotReservedByAdmin(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "slotReservedByAdmin(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIsRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenIsRegistered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDAYS_IN_SECONDS(
      sec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDAYS_IN_SECONDS(uint256)"(
      sec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        boolean,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenPrice: BigNumber;
        lastInvestmentTimestamp: number;
        referrer: string;
        investedDollars: BigNumber;
        KYC: boolean;
        mintedOnce: boolean;
        bonusMatrixAllocation: number;
        id: BigNumber;
        userType: number;
        investmentCounter: number;
        investedDollarsInBonusSlots: BigNumber;
        soldDollarsInFlashSale: BigNumber;
        totalTokens: BigNumber;
      }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        boolean,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenPrice: BigNumber;
        lastInvestmentTimestamp: number;
        referrer: string;
        investedDollars: BigNumber;
        KYC: boolean;
        mintedOnce: boolean;
        bonusMatrixAllocation: number;
        id: BigNumber;
        userType: number;
        investmentCounter: number;
        investedDollarsInBonusSlots: BigNumber;
        soldDollarsInFlashSale: BigNumber;
        totalTokens: BigNumber;
      }
    >;
  };

  filters: {
    BonusAllocation(
      user: null,
      price: null,
      token: null,
      time: null,
      investment: null,
      decimalFactor: null,
      investmentCounter: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        price: BigNumber;
        token: BigNumber;
        time: BigNumber;
        investment: BigNumber;
        decimalFactor: BigNumber;
        investmentCounter: BigNumber;
      }
    >;

    DripWithdrawal(
      user: null,
      investmentCounter: null,
      tokens: null,
      time: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        investmentCounter: number;
        tokens: BigNumber;
        time: BigNumber;
      }
    >;

    FlashSale(
      seller: null,
      buyer: null,
      price: null,
      token: null,
      time: null,
      value: null,
      decimals: null,
      investmentCounter: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        price: BigNumber;
        token: BigNumber;
        time: BigNumber;
        value: BigNumber;
        decimals: BigNumber;
        investmentCounter: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PurchaseTokens(
      userAddress: string | null,
      tokens: null,
      investmentCounter: null,
      time: null,
      isReserved: null,
      tokenPrice: null,
      investedDollars: null,
      sellOnCurrentPrice: null,
      decimalFactor: null,
      currentPrice: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        number,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ],
      {
        userAddress: string;
        tokens: BigNumber;
        investmentCounter: number;
        time: BigNumber;
        isReserved: boolean;
        tokenPrice: BigNumber;
        investedDollars: BigNumber;
        sellOnCurrentPrice: boolean;
        decimalFactor: BigNumber;
        currentPrice: BigNumber;
      }
    >;

    ReffralIncome(
      user: null,
      reffralAddress: null,
      reffralIncome: null,
      ozOperationIncome: null,
      decimalFactor: null,
      time: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        reffralAddress: string;
        reffralIncome: BigNumber;
        ozOperationIncome: BigNumber;
        decimalFactor: BigNumber;
        time: BigNumber;
      }
    >;

    Registration(
      userAddress: string | null,
      referrerAddress: string | null,
      userId: null,
      referrerId: null,
      time: null,
      isKYC: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, boolean],
      {
        userAddress: string;
        referrerAddress: string;
        userId: BigNumber;
        referrerId: BigNumber;
        time: BigNumber;
        isKYC: boolean;
      }
    >;

    SellToken(
      buyer: null,
      tokens: null,
      price: null,
      time: null,
      investmentCounter: null,
      currentPrice: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        tokens: BigNumber;
        price: BigNumber;
        time: BigNumber;
        investmentCounter: BigNumber;
        currentPrice: BigNumber;
      }
    >;

    SlotReservedByAdmin(
      user: null,
      userType: null,
      price: null,
      timeStamp: null,
      blockNumber: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        userType: BigNumber;
        price: BigNumber;
        timeStamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;
  };

  estimateGas: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "DAYS_IN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    _currentTokenPrice(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_currentTokenPrice(uint256)"(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _dripwithdrawal(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_dripwithdrawal(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addToken(address)"(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonuspercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "bonuspercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDrip(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDrip(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeBonusPercentage(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeBonusPercentage(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeKYC(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeKYC(address,address,bool)"(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    dripWithdrawal(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dripWithdrawal(uint32)"(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashSale(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flashSale(address,address,uint128)"(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "idToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investment(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "investment(address,uint64)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ozOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "ozOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseOZBonusTokens(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "purchaseOZBonusTokens(uint128,address)"(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseTokens(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "purchaseTokens(uint128,address,address)"(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootNode(overrides?: CallOverrides): Promise<BigNumber>;

    "rootNode()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellToken(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellToken(address[],uint256[],uint64)"(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slotReservedByAdmin(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "slotReservedByAdmin(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIsRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIsRegistered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDAYS_IN_SECONDS(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDAYS_IN_SECONDS(uint256)"(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAYS_IN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DAYS_IN_SECONDS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _currentTokenPrice(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_currentTokenPrice(uint256)"(
      _publicSaleInDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _dripwithdrawal(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_dripwithdrawal(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToken(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonuspercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonuspercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDrip(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateDrip(address,uint64)"(
      user: string,
      counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeBonusPercentage(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeBonusPercentage(uint256)"(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeKYC(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeKYC(address,address,bool)"(
      _referrer: string,
      user: string,
      check: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dripWithdrawal(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dripWithdrawal(uint32)"(
      counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashSale(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flashSale(address,address,uint128)"(
      user: string,
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "idToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _root: string,
      ozTokenAddress: string,
      _ozOperations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investment(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "investment(address,uint64)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ozOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ozOperations()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseOZBonusTokens(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "purchaseOZBonusTokens(uint128,address)"(
      value: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseTokens(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "purchaseTokens(uint128,address,address)"(
      value: BigNumberish,
      tokenAddress: string,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rootNode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellToken(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellToken(address[],uint256[],uint64)"(
      tokenAddresses: string[],
      numberOfTokens: BigNumberish[],
      investmentCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slotReservedByAdmin(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "slotReservedByAdmin(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenAddresses(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIsRegistered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIsRegistered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDAYS_IN_SECONDS(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDAYS_IN_SECONDS(uint256)"(
      sec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
